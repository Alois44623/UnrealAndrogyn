// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Engine/Private/Quaternion.ush"

RWByteAddressBuffer {DataInterfaceName}_DataCollectionBuffer;

// TODO: These defines could be code-gen'd to stay in sync with our PCGComputeConstants, see UComputeDataInterface::GetDefines()
#define POINT_POSITION_ID 0
#define POINT_ROTATION_ID 1
#define POINT_SCALE_ID 2
#define POINT_BOUNDS_MIN_ID 3
#define POINT_BOUNDS_MAX_ID 4
#define POINT_COLOR_ID 5
#define POINT_DENSITY_ID 6
#define POINT_SEED_ID 7
#define POINT_STEEPNESS_ID 8
#define POINT_METADATA_ENTRY_ID 9

#define INVALID_DENSITY 1.#INF

// #################### DIRECT BUFFER OPERATIONS ##########################

uint LoadBufferInternal_{DataInterfaceName}(uint Address)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(Address);
}

void StoreBufferInternal_{DataInterfaceName}(uint Address, uint Value)
{
	return {DataInterfaceName}_DataCollectionBuffer.Store(Address, Value);
}

// #################### HEADER READERS ##########################

uint GetNumData_{DataInterfaceName}()
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(0);
}

uint GetDataAddress_{DataInterfaceName}(uint DataIndex)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load((DataIndex + 1) * 4);
}

uint GetDataId_{DataInterfaceName}(uint DataAddress)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(DataAddress + 0);
}

uint GetDataNumAttributes_{DataInterfaceName}(uint DataAddress)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(DataAddress + 4);
}

uint GetDataPreambleSize_{DataInterfaceName}(uint DataAddress)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(DataAddress + 8);
}

// For PointData, this is just NumPoints
uint GetDataInfo_{DataInterfaceName}(uint DataAddress)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(DataAddress + 12);
}

bool GetThreadData_{DataInterfaceName}(uint InThreadIndex, out uint OutDataIndex, out uint OutDataAddress, out uint OutElementIndex)
{
	int ElementIndex = InThreadIndex;

	const uint NumData = GetNumData_{DataInterfaceName}();
	for (uint DataIndex = 0; DataIndex < NumData; ++DataIndex)
	{
		const uint DataAddress = GetDataAddress_{DataInterfaceName}(DataIndex);
		const uint ElemCount = GetDataInfo_{DataInterfaceName}(DataAddress);

		if (ElementIndex < ElemCount)
		{
			OutDataIndex = DataIndex;
			OutDataAddress = DataAddress;
			OutElementIndex = ElementIndex;

			return true;
		}

		ElementIndex -= ElemCount;
	}

	OutDataIndex = -1;
	OutDataAddress = -1;
	OutElementIndex = -1;

	return false;
}

bool GetThreadData_{DataInterfaceName}(uint InThreadIndex, out uint OutDataIndex, out uint OutElementIndex)
{
	uint DataAddressDummy = -1;
	return GetThreadData_{DataInterfaceName}(InThreadIndex, OutDataIndex, DataAddressDummy, OutElementIndex);
}

uint GetNumElements_{DataInterfaceName}()
{
	uint NumElements = 0;

	const uint NumData = GetNumData_{DataInterfaceName}();
	for (uint DataIndex = 0; DataIndex < NumData; ++DataIndex)
	{
		const uint DataAddress = GetDataAddress_{DataInterfaceName}(DataIndex);
		NumElements += GetDataInfo_{DataInterfaceName}(DataAddress);
	}

	return NumElements;
}

uint GetDataAttributeHeadersAddress_{DataInterfaceName}(uint DataAddress)
{
	return DataAddress + GetDataPreambleSize_{DataInterfaceName}(DataAddress);
}

uint GetAttributeHeaderAddress_{DataInterfaceName}(uint AttributeHeadersAddress, uint AttributeId)
{
	return AttributeHeadersAddress + AttributeId * 8;
}

uint GetAttributeIdAndStride_{DataInterfaceName}(uint AttributeHeaderAddress)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(AttributeHeaderAddress);
}

uint GetAttributeId_{DataInterfaceName}(uint AttributeHeaderAddress)
{
	return GetAttributeIdAndStride_{DataInterfaceName}(AttributeHeaderAddress) >> 8;
}

uint GetAttributeStride_{DataInterfaceName}(uint AttributeHeaderAddress)
{
	return GetAttributeIdAndStride_{DataInterfaceName}(AttributeHeaderAddress) & (0xFFFFFFFF >> 24);
}

uint GetAttributeAddress_{DataInterfaceName}(uint AttributeHeaderAddress)
{
	return {DataInterfaceName}_DataCollectionBuffer.Load(AttributeHeaderAddress + 4);
}

uint GetAttributeAddress_{DataInterfaceName}(uint InDataAddress, uint InAttributeId)
{
	const uint AttributeHeadersAddress = GetDataAttributeHeadersAddress_{DataInterfaceName}(InDataAddress);
	const uint NumAttributes = GetDataNumAttributes_{DataInterfaceName}(InDataAddress);

	for (uint AttributeIndex = 0; AttributeIndex < NumAttributes; ++AttributeIndex)
	{
		const uint AttributeHeaderAddress = GetAttributeHeaderAddress_{DataInterfaceName}(AttributeHeadersAddress, AttributeIndex);

		if (GetAttributeId_{DataInterfaceName}(AttributeHeaderAddress) == InAttributeId)
		{
			return GetAttributeAddress_{DataInterfaceName}(AttributeHeaderAddress);
		}
	}

	return -1;
}

// #################### HEADER WRITERS ##########################

void SetNumDataInternal_{DataInterfaceName}(uint NumData)
{
	{DataInterfaceName}_DataCollectionBuffer.Store(0, NumData);
}

void SetDataAddressInternal_{DataInterfaceName}(uint DataIndex, uint DataAddress)
{
	{DataInterfaceName}_DataCollectionBuffer.Store((DataIndex + 1) * 4, DataAddress);
}

void SetDataIdInternal_{DataInterfaceName}(uint DataAddress, uint Id)
{
	{DataInterfaceName}_DataCollectionBuffer.Store(DataAddress + 0, Id);
}

void SetDataNumAttributesInternal_{DataInterfaceName}(uint DataAddress, uint NumAttributes)
{
	{DataInterfaceName}_DataCollectionBuffer.Store(DataAddress + 4, NumAttributes);
}

void SetDataPreambleSizeInternal_{DataInterfaceName}(uint DataAddress, uint PreambleSize)
{
	{DataInterfaceName}_DataCollectionBuffer.Store(DataAddress + 8, PreambleSize);
}

// For PointData, this is just NumPoints
void SetDataInfoInternal_{DataInterfaceName}(uint DataAddress, uint Info)
{
	{DataInterfaceName}_DataCollectionBuffer.Store(DataAddress + 12, Info);
}

void SetAttributeIdAndStrideInternal_{DataInterfaceName}(uint AttributeHeaderAddress, uint IdAndStride)
{
	{DataInterfaceName}_DataCollectionBuffer.Store(AttributeHeaderAddress, IdAndStride);
}

void SetAttributeAddressInternal_{DataInterfaceName}(uint AttributeHeaderAddress, uint AttributeAddress)
{
	{DataInterfaceName}_DataCollectionBuffer.Store(AttributeHeaderAddress + 4, AttributeAddress);
}

// #################### ATTRIBUTE GETTERS ##########################

uint ComputeAddressHelper_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint DataAddress = GetDataAddress_{DataInterfaceName}(DataIndex);
	const uint AttributeHeadersAddress = GetDataAttributeHeadersAddress_{DataInterfaceName}(DataAddress);
	const uint AttributeHeaderAddress = GetAttributeHeaderAddress_{DataInterfaceName}(AttributeHeadersAddress, AttributeId);
	return GetAttributeAddress_{DataInterfaceName}(AttributeHeaderAddress);
}

bool GetBool_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asbool({DataInterfaceName}_DataCollectionBuffer.Load(AttributeAddress + ElementIndex * 1 * 4));
}

int GetInt_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asint({DataInterfaceName}_DataCollectionBuffer.Load(AttributeAddress + ElementIndex * 1 * 4));
}

int GetUint_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return {DataInterfaceName}_DataCollectionBuffer.Load(AttributeAddress + ElementIndex * 1 * 4);
}

float GetFloat_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asfloat({DataInterfaceName}_DataCollectionBuffer.Load(AttributeAddress + ElementIndex * 1 * 4));
}

float2 GetFloat2_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asfloat({DataInterfaceName}_DataCollectionBuffer.Load2(AttributeAddress + ElementIndex * 2 * 4));
}

float3 GetFloat3_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asfloat({DataInterfaceName}_DataCollectionBuffer.Load3(AttributeAddress + ElementIndex * 3 * 4));
}

float4 GetFloat4_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asfloat({DataInterfaceName}_DataCollectionBuffer.Load4(AttributeAddress + ElementIndex * 4 * 4));
}

float3 GetRotator_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asfloat({DataInterfaceName}_DataCollectionBuffer.Load3(AttributeAddress + ElementIndex * 3 * 4));
}

float4 GetQuat_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	return asfloat({DataInterfaceName}_DataCollectionBuffer.Load4(AttributeAddress + ElementIndex * 4 * 4));
}

// #################### ATTRIBUTE SETTERS ##########################

void SetBool_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, bool Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store(AttributeAddress + ElementIndex * 1 * 4, asuint(Value));
}

void SetInt_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, int Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store(AttributeAddress + ElementIndex * 1 * 4, asuint(Value));
}

void SetUint_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, uint Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store(AttributeAddress + ElementIndex * 1 * 4, Value);
}

void SetFloat_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, float Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store(AttributeAddress + ElementIndex * 1 * 4, asuint(Value));
}

void SetFloat2_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, float2 Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store2(AttributeAddress + ElementIndex * 2 * 4, asuint(Value));
}

void SetFloat3_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, float3 Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store3(AttributeAddress + ElementIndex * 3 * 4, asuint(Value));
}

void SetFloat4_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, float4 Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store4(AttributeAddress + ElementIndex * 4 * 4, asuint(Value));
}

void SetRotator_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, float3 Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store3(AttributeAddress + ElementIndex * 3 * 4, asuint(Value));
}

void SetQuat_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint AttributeId, float4 Value)
{
	const uint AttributeAddress = ComputeAddressHelper_{DataInterfaceName}(DataIndex, ElementIndex, AttributeId);
	{DataInterfaceName}_DataCollectionBuffer.Store4(AttributeAddress + ElementIndex * 4 * 4, asuint(Value));
}

// #################### POINT ATTRIBUTE GETTERS ##########################

float3 GetPosition_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_POSITION_ID);
}

float4 GetRotation_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat4_{DataInterfaceName}(DataIndex, ElementIndex, POINT_ROTATION_ID);
}

float3 GetScale_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_SCALE_ID);
}

float3 GetBoundsMin_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_BOUNDS_MIN_ID);
}

float3 GetBoundsMax_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_BOUNDS_MAX_ID);
}

float4 GetColor_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat4_{DataInterfaceName}(DataIndex, ElementIndex, POINT_COLOR_ID);
}

float GetDensity_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat_{DataInterfaceName}(DataIndex, ElementIndex, POINT_DENSITY_ID);
}

float GetSteepness_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetFloat_{DataInterfaceName}(DataIndex, ElementIndex, POINT_STEEPNESS_ID);
}

uint GetSeed_{DataInterfaceName}(uint DataIndex, uint ElementIndex)
{
	return GetUint_{DataInterfaceName}(DataIndex, ElementIndex, POINT_SEED_ID);
}

float4x4 GetPointTransform_{DataInterfaceName}(uint InDataIndex, uint InElementIndex)
{
	const FQuat Rotation = GetRotation_{DataInterfaceName}(InDataIndex, InElementIndex);
	const half3x3 RotationMatrix = QuatToMatrix(Rotation);
	const float3 Position = GetPosition_{DataInterfaceName}(InDataIndex, InElementIndex);
	const float3 Scale = GetScale_{DataInterfaceName}(InDataIndex, InElementIndex);
	
	const float3 Axis0 = Scale.x * RotationMatrix[0];
	const float3 Axis1 = Scale.y * RotationMatrix[1];
	const float3 Axis2 = Scale.z * RotationMatrix[2];

	return float4x4(
		Axis0.x, Axis0.y, Axis0.z, Position.x,
		Axis1.x, Axis1.y, Axis1.z, Position.y,
		Axis2.x, Axis2.y, Axis2.z, Position.z,
		(float3)0.0, 1.0);
}

bool IsValid_{DataInterfaceName}(uint InDataIndex, uint InElementIndex)
{
	return GetDensity_{DataInterfaceName}(InDataIndex, InElementIndex) != INVALID_DENSITY;
}

// #################### POINT ATTRIBUTE SETTERS ##########################

void SetPosition_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float3 Position)
{
	SetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_POSITION_ID, Position);
}

void SetRotation_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float4 Rotation)
{
	SetFloat4_{DataInterfaceName}(DataIndex, ElementIndex, POINT_ROTATION_ID, Rotation);
}

void SetScale_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float3 Scale)
{
	SetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_SCALE_ID, Scale);
}

void SetBoundsMin_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float3 BoundsMin)
{
	SetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_BOUNDS_MIN_ID, BoundsMin);
}

void SetBoundsMax_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float3 BoundsMax)
{
	SetFloat3_{DataInterfaceName}(DataIndex, ElementIndex, POINT_BOUNDS_MAX_ID, BoundsMax);
}

void SetColor_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float4 Color)
{
	SetFloat4_{DataInterfaceName}(DataIndex, ElementIndex, POINT_COLOR_ID, Color);
}

void SetDensity_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float Density)
{
	SetFloat_{DataInterfaceName}(DataIndex, ElementIndex, POINT_DENSITY_ID, Density);
}

void SetSteepness_{DataInterfaceName}(uint DataIndex, uint ElementIndex, float Steepness)
{
	SetFloat_{DataInterfaceName}(DataIndex, ElementIndex, POINT_STEEPNESS_ID, Steepness);
}

void SetSeed_{DataInterfaceName}(uint DataIndex, uint ElementIndex, uint Seed)
{
	SetUint_{DataInterfaceName}(DataIndex, ElementIndex, POINT_SEED_ID, Seed);
}

void SetPointTransform_{DataInterfaceName}(uint InDataIndex, uint InElementIndex, float4x4 Transform)
{
	const float3 Scale = float3(length(Transform._m00_m01_m02), length(Transform._m10_m11_m12), length(Transform._m20_m21_m22));
	SetScale_{DataInterfaceName}(InDataIndex, InElementIndex, Scale);

	// Assumes Transform axes have the correct handedness. We could do more work to fix this up too if required.
	float3x3 RotationMatix = Transform;
	// Required unfortunately, QuatFromMatrix expects orthonormalized.
	RotationMatix[0] /= Scale.x;
	RotationMatix[1] /= Scale.y;
	RotationMatix[2] /= Scale.z;
	const FQuat Rotation = QuatFromMatrix(RotationMatix);
	SetRotation_{DataInterfaceName}(InDataIndex, InElementIndex, Rotation);

	const float3 Position = Transform._m03_m13_m23;
	SetPosition_{DataInterfaceName}(InDataIndex, InElementIndex, Position);
}

void RemovePoint_{DataInterfaceName}(uint InDataIndex, uint InElementIndex)
{
	SetDensity_{DataInterfaceName}(InDataIndex, InElementIndex, INVALID_DENSITY);
}

// Initialize a single point with default values.
void InitializePoint_{DataInterfaceName}(uint InDataIndex, uint InElementIndex)
{
	SetPosition_{DataInterfaceName}(InDataIndex, InElementIndex, 1.0f);
	SetRotation_{DataInterfaceName}(InDataIndex, InElementIndex, float4(0.0f, 0.0f, 0.0f, 1.0f));
	SetScale_{DataInterfaceName}(InDataIndex, InElementIndex, 1.0f);
	SetBoundsMin_{DataInterfaceName}(InDataIndex, InElementIndex, -50.0f);
	SetBoundsMax_{DataInterfaceName}(InDataIndex, InElementIndex, 50.0f);
	SetColor_{DataInterfaceName}(InDataIndex, InElementIndex, 1.0f);
	SetDensity_{DataInterfaceName}(InDataIndex, InElementIndex, 1.0f);
	SetSeed_{DataInterfaceName}(InDataIndex, InElementIndex, 42);
	SetSteepness_{DataInterfaceName}(InDataIndex, InElementIndex, 0.5f);
	
	// TODO - code gen initialization of all attributes, or remove this function.
}
